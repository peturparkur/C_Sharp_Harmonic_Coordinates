// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Calculate

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
//matrix A should be the weights
uniform int columns;
StructuredBuffer<float> matrixA; //we assume the calculation is Result = A*b where a and B are compatible
StructuredBuffer<float3> vectorB; //b are the vertices
RWStructuredBuffer<float3> Result; //the output vector

[numthreads(64,1,1)]
void Calculate (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
	for (uint i = 0; i < (uint)columns; i++)
	{
		//we calculate each row in the vector in individual threads
		Result[id.x] += matrixA[i + columns * id.x] * vectorB[i]; //hopefully matrix multiplication
	}

}
