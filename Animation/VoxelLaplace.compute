// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
//uniform prefix if we wont to keep data for next shader invocation
RWStructuredBuffer<float3> targetVertex;
RWStructuredBuffer<float3> cageVertex;
StructuredBuffer<float> weights; //big matrix with weights[targetVertex,cageVertex]

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID) //will be used as Dispatch(kernel, dim_X, dim_Y, dim_Z)
{
    // TODO: insert actual code here!
    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
	//Result[id.xyz] = start[id.xyz];
	uint l = targetVertex.length;
}
